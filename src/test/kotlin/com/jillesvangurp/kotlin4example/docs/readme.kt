package com.jillesvangurp.kotlin4example.docs

import com.jillesvangurp.kotlin4example.SourceRepository

val k4ERepo = SourceRepository("https://github.com/jillesvangurp/kotlin4example")

val readme by k4ERepo.md {
    // for larger bits of text, it's nice to load them from a markdown file
    includeMdFile("intro.md")

    block(runBlock = false) {
        // documentation inception
        // this is technically a block within a block, just so I can show you
        // how you would use it.
        block {
            println("Hello World")
        }
    }
    // but of course you can inline a Kotlin multiline string with some markdown
    +"""
        Here's the same block as above running as part of this ${mdLinkToSelf("readme.kt")} file.
    """

    block {
        println("Hello World")
    }

    +"""
        As you can see, we indeed show a pretty printed block, ran it, and  grabbed the output. Observant readers will 
        also note that the nested block above did not run. The reason for this is that the outer `block` call for that 
        has a parameter that you can use to prevent this. If you look at the source code for the readme, you will see 
        we used `block(runBlock = false)`
        
        We can also return a value from the block and capture that:
    """

    block {
        fun aFunctionThatReturnsAnInt() = 1+1

        // call the function to make the block return something
        aFunctionThatReturnsAnInt()
    }

    +"""
        Note how that captured the return value and printed that without us using `print` or `println`.
    """

    +"""
        For more elaborate examples of using this library, checkout my 
        [Kotlin Client for Elasticsearch](https://github.com/jillesvangurp/es-kotlin-wrapper-client) project. That 
        project is where this project emerged from and all markdown in that project is generated by kotlin4example.
        
        ## Development status & roadmap
        
        This is still a work in progress but it's also the basis for documentation for a few projects I maintain.       
        So, API stability is at this point getting more important to me. Which means it should be fine for you as well. 
        
        I'm planning to build this out over time with more useful features. My intention is not to replace markdown
        with a Kotlin DSL. But instead to generate e.g. markdown links with kotlin and have a
        few other conveniences. Also, I'm thinking of eventually self publishing some of the documentation for my 
        projects in epub form and have started experimenting with generating scripts to unleash pandoc on my 
        generated markdown.
        
        Finally, most of the things you document are also the things you should be testing and there is an argument
        to be made for turning this into a proper test framework. Projects like [kotest](https://github.com/kotest/kotest)
        could be combined with this to accomplish that I guess.
    """
}
